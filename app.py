import os, json
from flask import Flask, request, jsonify, render_template
from dotenv import load_dotenv
import requests
import numpy as np
from data import get_data
from flask_cors import CORS

# === –∫–æ–Ω—Ñ–∏–≥ ===
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –±–µ–∑–æ–ø–∞—Å–Ω–æ
api_key = os.getenv("DEEPSEEK_API_KEY")
if not api_key:
    print("‚ö†Ô∏è DEEPSEEK_API_KEY not found - using local logic")

df = get_data()
app = Flask(__name__)
CORS(app)  # –í–∞–∂–Ω–æ –¥–ª—è Vercel!

def call_deepseek_api(prompt: str):
    """–í—ã–∑–æ–≤ DeepSeek API"""
    if not api_key:
        return None
        
    url = "https://api.deepseek.com/v1/chat/completions"
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    
    data = {
        "model": "deepseek-chat",
        "messages": [
            {
                "role": "system", 
                "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –±–ª—é–¥. –í–µ—Ä–Ω–∏ JSON: {choice: '–Ω–∞–∑–≤–∞–Ω–∏–µ', reason: '—Ç–µ–∫—Å—Ç', target_macros: {calories: —á–∏—Å–ª–æ –∏–ª–∏ null, proteins: —á–∏—Å–ª–æ –∏–ª–∏ null, fats: —á–∏—Å–ª–æ –∏–ª–∏ null, carbs: —á–∏—Å–ª–æ –∏–ª–∏ null}}"
            },
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.3,
        "response_format": {"type": "json_object"}
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"DeepSeek API error: {e}")
        return None

def llm_pick_dish(free_text: str):
    """–í—ã–±–æ—Ä –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ DeepSeek –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É"""
    dish_names = df["name"].tolist()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DeepSeek API
    if api_key:
        dishes_str = "\n".join([f"- {name}" for name in dish_names])
        prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "{free_text}"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª—é–¥–∞:
{dishes_str}

–í—ã–±–µ—Ä–∏ –û–î–ù–û –±–ª—é–¥–æ –∏ –≤–µ—Ä–Ω–∏ JSON:
{{
    "choice": "–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞",
    "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
    "target_macros": {{
        "calories": —á–∏—Å–ª–æ –∏–ª–∏ null,
        "proteins": —á–∏—Å–ª–æ –∏–ª–∏ null, 
        "fats": —á–∏—Å–ª–æ –∏–ª–∏ null,
        "carbs": —á–∏—Å–ª–æ –∏–ª–∏ null
    }}
}}
"""
        try:
            api_response = call_deepseek_api(prompt)
            if api_response and 'choices' in api_response:
                content = api_response['choices'][0]['message']['content']
                result = json.loads(content)
                
                if 'choice' in result and result['choice'] in dish_names:
                    print("‚úÖ DeepSeek API —É—Å–ø–µ—à–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª!")
                    return result
        except Exception as e:
            print(f"‚ùå DeepSeek failed: {e}")
    
    # –õ–æ–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É")
    query_lower = free_text.lower()
    target_macros = {"calories": None, "proteins": None, "fats": None, "carbs": None}
    
    if any(word in query_lower for word in ["–¥–∏–µ—Ç–∏—á", "–ª–µ–≥–∫", "–º–∞–ª–æ –∫–∞–ª–æ—Ä–∏–π", "–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π"]):
        target_macros["calories"] = 250
        return {"choice": "–†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É", "reason": "–î–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ –±–ª—é–¥–æ —Å –Ω–∏–∑–∫–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é", "target_macros": target_macros}
    elif any(word in query_lower for word in ["–±–µ–ª–∫", "–ø—Ä–æ—Ç–µ–∏–Ω", "–º–Ω–æ–≥–æ –±–µ–ª–∫–∞"]):
        target_macros["proteins"] = 30
        return {"choice": "–ö—É—Ä–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏", "reason": "–ë–æ–≥–∞—Ç–æ–µ –±–µ–ª–∫–æ–º –±–ª—é–¥–æ", "target_macros": target_macros}
    elif any(word in query_lower for word in ["—É–≥–ª–µ–≤", "–∫–∞—Ä–±", "—ç–Ω–µ—Ä–≥–∏"]):
        target_macros["carbs"] = 50
        return {"choice": "–ì—Ä–µ—á–∫–∞ —Å –º—è—Å–æ–º", "reason": "–ë–æ–≥–∞—Ç–æ–µ —É–≥–ª–µ–≤–æ–¥–∞–º–∏ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏", "target_macros": target_macros}
    elif any(word in query_lower for word in ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω", "–±–µ–∑ –º—è—Å–∞"]):
        return {"choice": "–ü–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏", "reason": "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ –±–ª—é–¥–æ", "target_macros": target_macros}
    elif any(word in query_lower for word in ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–º–ª–µ—Ç"]):
        return {"choice": "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏", "reason": "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞", "target_macros": target_macros}
    elif any(word in query_lower for word in ["—Å–∞–ª–∞—Ç", "—Å–≤–µ–∂"]):
        return {"choice": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "reason": "–°–≤–µ–∂–∏–π –∏ –ª–µ–≥–∫–∏–π —Å–∞–ª–∞—Ç", "target_macros": target_macros}
    else:
        return {"choice": "–ö—É—Ä–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏", "reason": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ", "target_macros": target_macros}

def score_by_macros(row, target):
    """–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ö–ë–ñ–£"""
    score = 0.0
    for k in ("calories", "proteins", "fats", "carbs"):
        t = target.get(k)
        if t is None: continue
        try:
            diff = max(0.0, float(row[k]) - float(t))
            score += diff / (float(t) if float(t) > 0 else 1.0)
        except (ValueError, TypeError): continue
    return score

@app.route("/")
def home():
    return render_template("index.html")

# –¢–û–õ–¨–ö–û –û–î–ò–ù endpoint /recommend!
@app.route("/recommend", methods=["POST", "OPTIONS"])
def recommend():
    if request.method == "OPTIONS":
        return jsonify({"status": "ok"})
    
    try:
        payload = request.get_json(force=True)
        query = (payload.get("query") or "").strip()
        if not query:
            return jsonify(error="empty query"), 400

        llm = llm_pick_dish(query)
        chosen_name = llm.get("choice")
        target = llm.get("target_macros") or {}

        # –ù–∞—Ö–æ–¥–∏–º –±–ª—é–¥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        if chosen_name in set(df["name"]):
            candidate = df[df["name"] == chosen_name].iloc[0].to_dict()
        else:
            candidate = df.iloc[0].to_dict()

        # –£—Ç–æ—á–Ω—è–µ–º –ø–æ –ö–ë–ñ–£ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if any(v not in (None, "") for v in target.values()):
            scored = [(score_by_macros(row, target), row.to_dict()) for _, row in df.iterrows()]
            scored.sort(key=lambda x: x[0])
            candidate = scored[0][1]

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ ML)
        recommendations = []
        if candidate["name"] == "–ö—É—Ä–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏":
            recommendations = ["–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏"]
        elif candidate["name"] == "–†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É":
            recommendations = ["–ì—Ä–µ—á–∫–∞ —Å –º—è—Å–æ–º", "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å"]
        elif candidate["name"] == "–ì—Ä–µ—á–∫–∞ —Å –º—è—Å–æ–º":
            recommendations = ["–†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É", "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏"]
        elif candidate["name"] == "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏":
            recommendations = ["–ö—É—Ä–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏", "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å"]
        elif candidate["name"] == "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å":
            recommendations = ["–ö—É—Ä–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏", "–ü–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏"]
        elif candidate["name"] == "–ü–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏":
            recommendations = ["–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "–†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É"]
        
        return jsonify({
            "dish": candidate,
            "llm_choice": llm.get("choice"),
            "reason": llm.get("reason"),
            "used_target_macros": target,
            "recommendations": recommendations
        })
    
    except Exception as e:
        print(f"‚ùå Error in recommend: {e}")
        return jsonify(error="Internal server error"), 500

if __name__ == "__main__":
    app.run(debug=True, host="127.0.0.1", port=5000)
